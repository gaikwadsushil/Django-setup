
# Comprehensive Django Project Setup Notes

## 1. Create a New Project Folder
   - Open Visual Studio Code.
   - Create a new folder for your Django project (e.g., "Django_Project").

## 2. Open Terminal
   - Open the terminal in Visual Studio Code (Terminal > New Terminal).

## 3. Set Up a Virtual Environment
   - Type the following command to create a virtual environment:
     - `python -m venv env`

## 4. Activate the Virtual Environment
   - For Windows, type:
     - `env\Scripts\activate`
   - For macOS/Linux, type:
     - `source env/bin/activate`

## 5. Install Django
   - Type the following command to install Django:
     - `pip install Django`

## 6. Check Installed Packages
   - Run the command to see the installed packages:
     - `pip freeze`

## 7. Start a New Django Project
   - Type the following command to create a new Django project named "qubits":
     - `django-admin startproject qubits`

## 8. Rename the Project Folder
   - Change directory into the project folder and rename it if desired (e.g., "main_project").
     - `cd qubits` (then rename as needed)

## 9. Run the Development Server
   - Type the command to run the server:
     - `python manage.py runserver`

## 10. Access Django Settings
   - In VS Code, search for and open `settings.py` within your project folder.

## 11. Add URL Patterns
   - Inside `settings.py`, add URL patterns to the urlpatterns list:
     - `path('admin/', admin.site.urls),`
     - `path('index/', views.index),`
     - `path('sushi/', views.sushil)`

## 12. Create Views
   - In `views.py`, define views for your application:
     ```python
     def sushil(request):
         return render(request, 'sushil.html')
     ```

## 13. Create Templates
   - Create a folder named `templates` inside your main project directory.
   - Inside `templates`, create the HTML files (e.g., `index.html`, `sushil.html`) and write your HTML code.

## 14. Run the Server Again
   - To see your changes, run the server again with:
     - `python manage.py runserver`

## 15. Create a New App (Optional)
   - If your project requires separate functionality, create a new app:
     - `python manage.py startapp sushi_app`

## 16. Add the App to Installed Apps
   - In `settings.py`, add your new app to the `INSTALLED_APPS` list:
     - `'sushi_app',`

## 17. Create Models
   - Define models in `sushi_app/models.py` for your data structure.

## 18. Create and Apply Migrations for the Models
   - Run the commands to create and apply migrations:
     - `python manage.py makemigrations`
     - `python manage.py migrate`

## 19. Register Models in Admin
   - In `sushi_app/admin.py`, register your models to make them accessible in the admin interface.

## 20. Create Superuser for Admin Access
   - Create a superuser account to access the admin panel:
     - `python manage.py createsuperuser`

## 21. Access the Admin Interface
   - Start the server and navigate to the admin interface at `http://127.0.0.1:8000/admin/`.

## 22. Implement Forms and User Input (Optional)
   - If needed, create forms in `forms.py` to handle user input.

## 23. Testing and Debugging
   - Test your application thoroughly and fix any bugs.

## 24. Deployment (Advanced)
   - Deploy your Django project to a production server (e.g., Heroku, DigitalOcean).

## 25. Documentation and Maintenance
   - Maintain documentation for your project and keep it updated.
